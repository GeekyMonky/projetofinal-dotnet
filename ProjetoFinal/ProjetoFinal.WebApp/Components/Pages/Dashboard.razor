@page "/dashboard"
@using System.Collections.Generic
@using System.Linq

@inject DashboardService DashboardService

<PageTitle>Dashboard</PageTitle>

<h3>Dashboard</h3>

<div class="dashboard-container">
    <!-- KPI Cards -->
    <div class="dashboard-row">
        <div class="dashboard-card">
            <h4>Total Movements Today</h4>
            <p class="dashboard-value">@totalSales</p>
        </div>
        <div class="dashboard-card">
            <h4>Total Products</h4>
            <p class="dashboard-value">@totalProducts</p>
        </div>
        <div class="dashboard-card">
            <h4>Total Stock Value</h4>
            <p class="dashboard-value">€@totalStockValue.ToString("N2")</p>
        </div>
    </div>

    <div class="dashboard-row">
        <!-- Stock by Category Pie Chart -->
        <div class="dashboard-section" style="flex: 1;">
            <h4>Stock Distribution by Category</h4>
            @if (isLoading)
            {
                <p>Loading chart data...</p>
            }
            else
            {
                <div style="height: 350px;">
                    <MudChart ChartType="ChartType.Pie"
                              InputData="@categoryStockData"
                              InputLabels="@categoryLabels"
                              Width="100%" Height="300px"
                              LegendPosition="Position.Bottom">
                        <CustomGraphics>
                            @for (int i = 0; i < categoryLabels.Length; i++)
                            {
                                var index = i; // Capture the current index in a local variable
                                <text>
                                    <g @onmouseover="() => ShowPercentage(index)" @onmouseout="HidePercentage">
                                        <path d="@GetSegmentPath(index)" fill="@GetSegmentColor(index)" stroke="white" stroke-width="1"></path>
                                    </g>
                                </text>
                            }
                            @if (showPercentageTooltip)
                            {
                                <foreignObject x="@tooltipX" y="@tooltipY" width="100" height="40">
                                    <div class="percentage-tooltip">
                                        @categoryLabels[selectedSegment]: @categoryPercentages[selectedSegment]%
                                    </div>
                                </foreignObject>
                            }
                        </CustomGraphics>
                    </MudChart>
                </div>
                <div class="percentage-legend">
                    @for (int i = 0; i < categoryLabels.Length; i++)
                    {
                        <div class="legend-item">
                            <span class="color-box" style="background-color: @GetSegmentColor(i)"></span>
                            <span>@categoryLabels[i]: @categoryPercentages[i]%</span>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Top 5 Categories -->
        <div class="dashboard-section" style="flex: 1;">
            <h4>Top 5 Categories with Most Products</h4>
            @if (isLoading)
            {
                <p>Loading category data...</p>
            }
            else
            {
                <table class="dashboard-table">
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Products</th>
                            <th>Average Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in topCategoriesWithAverageCost)
                        {
                            <tr>
                                <td>@category.CategoryName</td>
                                <td>@category.ProductCount</td>
                                <td>€@category.AverageCost.ToString("N2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<style>
    .dashboard-container {
        padding: 20px;
    }

    .dashboard-row {
        display: flex;
        gap: 20px;
        margin-bottom: 30px;
    }

    .dashboard-card {
        background-color: #f5f5f5;
        border-radius: 8px;
        padding: 20px;
        flex: 1;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .dashboard-value {
        font-size: 24px;
        font-weight: bold;
        color: #2c3e50;
    }

    .dashboard-section {
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 30px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .dashboard-table {
        width: 100%;
        border-collapse: collapse;
    }

        .dashboard-table th, .dashboard-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

    .percentage-tooltip {
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 5px 10px;
        border-radius: 4px;
        font-size: 14px;
        pointer-events: none;
    }

    .percentage-legend {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 15px;
        margin-top: 10px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        font-size: 14px;
    }

    .color-box {
        display: inline-block;
        width: 12px;
        height: 12px;
        margin-right: 5px;
        border-radius: 2px;
    }
</style>

@code {
    private int totalSales;
    private int totalProducts;
    private decimal totalStockValue;
    private List<CategoryWithAverageCost> topCategoriesWithAverageCost = new();
    private List<DashboardService.CategoryStock> categoryStocks = new();
    private bool isLoading = true;

    // Data for pie chart
    private double[] categoryStockData = Array.Empty<double>();
    private string[] categoryLabels = Array.Empty<string>();
    private double[] categoryPercentages = Array.Empty<double>();

    // Tooltip data
    private bool showPercentageTooltip = false;
    private int selectedSegment = 0;
    private double tooltipX = 0;
    private double tooltipY = 0;

    // Chart colors
    private string[] chartColors = new[]
    {
        "#1E88E5", "#43A047", "#FB8C00", "#E53935", "#5E35B1",
        "#546E7A", "#D81B60", "#8E24AA", "#3949AB", "#039BE5"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardDataAsync();
    }

    private async Task LoadDashboardDataAsync()
    {
        try
        {
            isLoading = true;

            // Load all data in parallel
            var salesTask = DashboardService.GetTotalSalesAsync();
            var stockValueTask = DashboardService.GetTotalStockValueAsync();
            var categoriesTask = DashboardService.GetTopCategoriesAsync();
            var stocksByCategoryTask = DashboardService.GetStockByCategoryAsync();

            // Wait for all tasks to complete
            await Task.WhenAll(salesTask, stockValueTask, categoriesTask, stocksByCategoryTask);

            // Assign results
            totalSales = await salesTask;
            totalStockValue = await stockValueTask;
            var categories = await categoriesTask;
            categoryStocks = await stocksByCategoryTask;

            // Prepare pie chart data
            PrepareChartData();

            // Load average costs for each category
            topCategoriesWithAverageCost.Clear();
            foreach (var category in categories)
            {
                try
                {
                    var averageCost = await DashboardService.GetAverageCostPriceAsync(category.CategoryId);
                    topCategoriesWithAverageCost.Add(new CategoryWithAverageCost
                        {
                            CategoryId = category.CategoryId,
                            CategoryName = category.CategoryName,
                            ProductCount = category.ProductCount,
                            AverageCost = averageCost
                        });
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error loading average cost for category {category.CategoryId}: {ex.Message}");
                    // Add category with default value for average cost
                    topCategoriesWithAverageCost.Add(new CategoryWithAverageCost
                        {
                            CategoryId = category.CategoryId,
                            CategoryName = category.CategoryName,
                            ProductCount = category.ProductCount,
                            AverageCost = 0
                        });
                }
            }

            // Calculate total products
            totalProducts = topCategoriesWithAverageCost.Sum(c => c.ProductCount);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void PrepareChartData()
    {
        if (categoryStocks == null || !categoryStocks.Any())
            return;

        // Get the top 5 categories by stock quantity, and group the rest as "Other"
        var top5Categories = categoryStocks.OrderByDescending(c => c.TotalStock).Take(5).ToList();
        var otherCategoriesStock = categoryStocks.OrderByDescending(c => c.TotalStock).Skip(5).Sum(c => c.TotalStock);

        // Prepare data arrays
        var dataList = top5Categories.Select(c => (double)c.TotalStock).ToList();
        var labelsList = top5Categories.Select(c => c.CategoryName).ToList();

        // Add "Other" category if there are more than 5 categories
        if (otherCategoriesStock > 0)
        {
            dataList.Add(otherCategoriesStock);
            labelsList.Add("Other");
        }

        categoryStockData = dataList.ToArray();
        categoryLabels = labelsList.ToArray();

        // Calculate percentages
        double total = categoryStockData.Sum();
        categoryPercentages = categoryStockData.Select(value => Math.Round((value / total) * 100, 1)).ToArray();
    }

    // Event handlers for tooltips
    private void ShowPercentage(int index)
    {
        selectedSegment = index;
        showPercentageTooltip = true;
        tooltipX = 100; // Set appropriate X position
        tooltipY = 100; // Set appropriate Y position
        StateHasChanged();
    }

    private void HidePercentage()
    {
        showPercentageTooltip = false;
        StateHasChanged();
    }

    // Placeholder methods for chart segment customization
    private string GetSegmentPath(int index)
    {
        // This would need actual chart geometry calculation
        // For now, returning empty since MudBlazor handles the actual segments
        return "";
    }

    private string GetSegmentColor(int index)
    {
        return chartColors[index % chartColors.Length];
    }

    private class CategoryWithAverageCost
    {
        public int CategoryId { get; set; }
        public string CategoryName { get; set; } = string.Empty;
        public int ProductCount { get; set; }
        public decimal AverageCost { get; set; }
    }
}
