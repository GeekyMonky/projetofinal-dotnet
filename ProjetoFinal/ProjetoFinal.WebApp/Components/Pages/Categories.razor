@page "/categories"
@using ProjetoFinal.Shared
@rendermode InteractiveServer
@inject IApiService ApiService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Needed for snackbars *@
<MudSnackbarProvider />

<h3>Categories</h3>
<h3>@Message</h3>

<MudTable Items="categories" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                           OnClick="() => OnEditCategory(context.Id)">
            </MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete"
                           OnClick="() => OnCategoryDeleteConfirm(context.Id, context.Name, context.Products)">   
            </MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code{
    private string Message { get; set; } = string.Empty;

    private List<Category> categories { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            await LoadCategories();
        }
        catch (Exception)
        {
            Message = "An error occurred while fetching categories.";
        }
    }

    private async Task LoadCategories()
    {
        categories = await ApiService.GetCategoriesAsync();
        StateHasChanged();
    }

    private async Task OnCategoryDeleteConfirm(int id, string categoryName, ICollection<Product>? products)
    {
        // Check if category has products - show error immediately without validation box
        if (products != null && products.Any())
        {
            Snackbar.Add("Category can't be deleted because it has products associated with it. Please delete these products first.", Severity.Error);
            return;
        }

        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("showMudBlazorStyleConfirm", "category", categoryName);
            if (confirmed)
            {
                await OnCategoryDelete(id);
            }
            else
            {
                Snackbar.Add("Category deletion cancelled.", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing confirmation dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnCategoryDelete(int id)
    {
        var response = await ApiService.DeleteCategoryAsync(id);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Category deleted successfully.", Severity.Success);
            await LoadCategories();
        }
        else
        {
            // Try to read the error message from the response
            var errorMessage = await response.Content.ReadAsStringAsync();
            if (errorMessage.Contains("products associated", StringComparison.OrdinalIgnoreCase))
            {
                Snackbar.Add("Category can't be deleted because it has products associated with it. Please delete these products first.", Severity.Error);
            }
            else
            {
                Snackbar.Add("Failed to delete category.", Severity.Error);
            }
        }
    }

    private void OnEditCategory(int id)
    {
        NavigationManager.NavigateTo($"/edit-category/{id}");
    }
}

<script>
    window.showMudBlazorStyleConfirm = (itemType, itemName) => {
        return new Promise((resolve) => {
            // Create overlay with custom class
            const overlay = document.createElement('div');
            overlay.className = 'custom-mud-dialog-overlay';
            
            // Create dialog with custom class
            const dialog = document.createElement('div');
            dialog.className = 'custom-mud-dialog';
            
            // Create title with custom class
            const title = document.createElement('div');
            title.className = 'custom-mud-dialog-title';
            title.textContent = 'Confirm Delete';
            
            // Create content with custom class
            const content = document.createElement('div');
            content.className = 'custom-mud-dialog-content';
            content.style.display = 'block';
            content.style.textAlign = 'center';
            content.style.whiteSpace = 'normal';

            // Message
            let messageHtml = `
                <div style="margin-bottom: 24px;">Are you sure you want to delete this ${itemType}?</div>
                <div style="margin-bottom: 24px; font-weight: bold;">${itemName}</div>
                <div style="margin-bottom: 0;">This action cannot be undone.</div>
            `;
            content.innerHTML = messageHtml;
            
            // Create actions with custom class
            const actions = document.createElement('div');
            actions.className = 'custom-mud-dialog-actions';
            
            // Create cancel button with custom classes
            const cancelBtn = document.createElement('button');
            cancelBtn.className = 'custom-mud-button custom-mud-button-default';
            cancelBtn.textContent = 'CANCEL';
            cancelBtn.onclick = () => {
                overlay.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(overlay)) {
                        document.body.removeChild(overlay);
                    }
                    resolve(false);
                }, 300);
            };
            
            // Create delete button with custom classes
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'custom-mud-button custom-mud-button-error';
            deleteBtn.textContent = 'DELETE';
            deleteBtn.onclick = () => {
                overlay.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(overlay)) {
                        document.body.removeChild(overlay);
                    }
                    resolve(true);
                }, 300);
            };
            
            // Assemble dialog
            actions.appendChild(cancelBtn);
            actions.appendChild(deleteBtn);
            dialog.appendChild(title);
            dialog.appendChild(content);
            dialog.appendChild(actions);
            overlay.appendChild(dialog);
            
            // Add to body
            document.body.appendChild(overlay);
            
            // Force styles to be applied
            setTimeout(() => {
                overlay.classList.add('show');
            }, 10);
            
            // Close on overlay click
            overlay.onclick = (e) => {
                if (e.target === overlay) {
                    cancelBtn.click();
                }
            };
            
            // ESC key support
            const handleEsc = (e) => {
                if (e.key === 'Escape') {
                    document.removeEventListener('keydown', handleEsc);
                    cancelBtn.click();
                }
            };
            document.addEventListener('keydown', handleEsc);
        });
    };
</script>
