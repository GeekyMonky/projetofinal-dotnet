@page "/categories"
@using ProjetoFinal.Shared
@rendermode InteractiveServer
@inject IApiService ApiService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Needed for snackbars *@
<MudSnackbarProvider />

<PageTitle>Category List</PageTitle>

<h3>Categories</h3>
<h3>@Message</h3>

<MudTable Items="categories" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                           OnClick="() => OnEditCategory(context.Id)">
            </MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete"
                           OnClick="() => OnCategoryDeleteConfirm(context.Id, context.Name, context.Products)">   
            </MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code{
    private string Message { get; set; } = string.Empty;

    private List<Category> categories { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            await LoadCategories();
        }
        catch (Exception)
        {
            Message = "An error occurred while fetching categories.";
        }
    }

    private async Task LoadCategories()
    {
        categories = await ApiService.GetCategoriesAsync();
        StateHasChanged();
    }

    private async Task OnCategoryDeleteConfirm(int id, string categoryName, ICollection<Product>? products)
    {
        // Check if category has products - show error immediately without validation box
        if (products != null && products.Any())
        {
            Snackbar.Add("Category can't be deleted because it has products associated with it. Please delete these products first.", Severity.Error);
            return;
        }

        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("showMudBlazorStyleConfirm", "category", categoryName);
            if (confirmed)
            {
                await OnCategoryDelete(id);
            }
            else
            {
                Snackbar.Add("Category deletion cancelled.", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing confirmation dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnCategoryDelete(int id)
    {
        var response = await ApiService.DeleteCategoryAsync(id);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Category deleted successfully.", Severity.Success);
            await LoadCategories();
        }
        else
        {
            // Try to read the error message from the response
            var errorMessage = await response.Content.ReadAsStringAsync();
            if (errorMessage.Contains("products associated", StringComparison.OrdinalIgnoreCase))
            {
                Snackbar.Add("Category can't be deleted because it has products associated with it. Please delete these products first.", Severity.Error);
            }
            else
            {
                Snackbar.Add("Failed to delete category.", Severity.Error);
            }
        }
    }

    private void OnEditCategory(int id)
    {
        NavigationManager.NavigateTo($"/edit-category/{id}");
    }
}
