@page "/products"
@using ProjetoFinal.Shared
@using System.Text.Json
@rendermode InteractiveServer
@inject IApiService ApiService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Needed for snackbars *@
<MudSnackbarProvider />

<h3>Products</h3>
<h3>@Message</h3>

<MudTable Items="SortedProductList" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Image</MudTh>
        <MudTh Style="cursor: pointer;" @onclick="() => SortBy(nameof(Product.Name))">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                Name
                @if (_currentSortColumn == nameof(Product.Name))
                {
                    <MudIcon Icon="@(_sortAscending ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Size="Size.Small" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Size="Size.Small" Style="opacity: 0.5;" />
                }
            </div>
        </MudTh>
        <MudTh>Description</MudTh>
        <MudTh Style="cursor: pointer;" @onclick="() => SortBy(nameof(Product.Price))">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                Price (€)
                @if (_currentSortColumn == nameof(Product.Price))
                {
                    <MudIcon Icon="@(_sortAscending ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Size="Size.Small" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Size="Size.Small" Style="opacity: 0.5;" />
                }
            </div>
        </MudTh>
        <MudTh Style="cursor: pointer;" @onclick="() => SortBy(nameof(Product.StockQuantity))">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                Stock Quantity
                @if (_currentSortColumn == nameof(Product.StockQuantity))
                {
                    <MudIcon Icon="@(_sortAscending ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Size="Size.Small" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Size="Size.Small" Style="opacity: 0.5;" />
                }
            </div>
        </MudTh>
        <MudTh Style="cursor: pointer;" @onclick="@(() => SortBy("Category"))">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                Category
                @if (_currentSortColumn == "Category")
                {
                    <MudIcon Icon="@(_sortAscending ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Size="Size.Small" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Size="Size.Small" Style="opacity: 0.5;" />
                }
            </div>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Image">
            @if (context.Images != null && context.Images.Any())
            {
                <MudImage Width="150" Height="150" Src="@context.Images.First().Url" Alt="@context.Name" />
            }
            else
            {
                <span>No Image</span>
            }
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">
            @(context.Description?.Length > 40 
                ? context.Description.Substring(0, 40) + "..." 
                : context.Description)
        </MudTd>
        <MudTd DataLabel="Price (€)">@context.Price.ToString("F2")</MudTd>
        <MudTd DataLabel="StockQuantity">@context.StockQuantity</MudTd>
        <MudTd DataLabel="Category">@context.Category?.Name</MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                           aria-label="details"
                           OnClick="() => OnProductDetail(context.Id)">
            </MudIconButton>
            <MudIconButton 
                Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                OnClick="() => OnEditProduct(context.Id)">
            </MudIconButton>
            <MudIconButton
                Icon="@Icons.Material.Filled.Delete" aria-label="delete" 
                OnClick="() => OnProductDeleteConfirm(context.Id, context.Name)"
                Disabled="@_isDeleting">
            </MudIconButton>             
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    private string Message { get; set; } = string.Empty;

    private List<Product> ProductList { get; set; } = new();
    private List<Product> SortedProductList { get; set; } = new();

    private string _currentSortColumn = string.Empty;
    private bool _sortAscending = true;
    private bool _isDeleting = false; // Add this to prevent multiple delete operations

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            await LoadProducts();
        }
        catch (Exception ex)
        {
            Message = $"Error fetching products: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        try
        {
            ProductList = await ApiService.GetProductsAsync();
            SortedProductList = new List<Product>(ProductList);
            Message = string.Empty; // Clear any previous error messages
            StateHasChanged();
        }
        catch (HttpRequestException httpEx)
        {
            Message = $"Network error while loading products: {httpEx.Message}";
            Snackbar.Add("Network error while loading products", Severity.Error);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Message = $"Failed to load products: {ex.Message}";
            Snackbar.Add("Failed to load products", Severity.Error);
            StateHasChanged();
        }
    }

    private void SortBy(string columnName)
    {
        if (_currentSortColumn == columnName)
        {
            // Toggle sort direction if same column
            _sortAscending = !_sortAscending;
        }
        else
        {
            // New column, default to ascending
            _currentSortColumn = columnName;
            _sortAscending = true;
        }

        switch (columnName)
        {
            case nameof(Product.Name):
                SortedProductList = _sortAscending 
                    ? ProductList.OrderBy(p => p.Name).ToList()
                    : ProductList.OrderByDescending(p => p.Name).ToList();
                break;

            case nameof(Product.Price):
                SortedProductList = _sortAscending 
                    ? ProductList.OrderBy(p => p.Price).ToList()
                    : ProductList.OrderByDescending(p => p.Price).ToList();
                break;

            case nameof(Product.StockQuantity):
                SortedProductList = _sortAscending 
                    ? ProductList.OrderBy(p => p.StockQuantity).ToList()
                    : ProductList.OrderByDescending(p => p.StockQuantity).ToList();
                break;

            case "Category":
                SortedProductList = _sortAscending 
                    ? ProductList.OrderBy(p => p.Category?.Name ?? string.Empty).ToList()
                    : ProductList.OrderByDescending(p => p.Category?.Name ?? string.Empty).ToList();
                break;

            default:
                SortedProductList = new List<Product>(ProductList);
                break;
        }

        StateHasChanged();
    }

    private async Task OnProductDeleteConfirm(int id, string productName)
    {
        // Prevent multiple delete operations
        if (_isDeleting) return;

        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("showMudBlazorStyleConfirm", "product", productName);
            if (confirmed)
            {
                await OnProductDelete(id);
            }
            else
            {
                Snackbar.Add("Product deletion cancelled.", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing confirmation dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnProductDelete(int id)
    {
        _isDeleting = true;
        StateHasChanged(); // Update UI to disable delete buttons
        
        try
        {
            var response = await ApiService.DeleteProductAsync(id);
            if (response.IsSuccessStatusCode)
            {
                // Parse the response to get deletion details
                var responseContent = await response.Content.ReadAsStringAsync();
                var deletionResult = System.Text.Json.JsonSerializer.Deserialize<JsonElement>(responseContent);
                
                int deletedStockMovements = 0;
                if (deletionResult.TryGetProperty("deletedStockMovements", out var stockMovementsProperty))
                {
                    deletedStockMovements = stockMovementsProperty.GetInt32();
                }
                
                // Create a detailed success message with proper grammar
                string successMessage = deletedStockMovements > 0 
                    ? $"Product deleted successfully! {deletedStockMovements} associated stock movement{(deletedStockMovements == 1 ? " was" : "s were")} also deleted."
                    : "Product deleted successfully!";
                    
                Snackbar.Add(successMessage, Severity.Success);
                
                // Reload products list
                await LoadProducts();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error deleting product: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Exception occurred while deleting product: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isDeleting = false;
            StateHasChanged(); // Re-enable delete buttons
        }
    }

    private void OnEditProduct(int id)
    {
        NavigationManager.NavigateTo($"edit-product/{id}");
    }

    private void OnProductDetail(int id)
    {
        NavigationManager.NavigateTo($"/product-details/{id}");
    }
}

<script>
    window.showMudBlazorStyleConfirm = (itemType, itemName) => {
        return new Promise((resolve) => {
            // Create overlay
            const overlay = document.createElement('div');
            overlay.className = 'custom-mud-dialog-overlay';

            // Create dialog
            const dialog = document.createElement('div');
            dialog.className = 'custom-mud-dialog';

            // Title
            const title = document.createElement('div');
            title.className = 'custom-mud-dialog-title';
            title.textContent = 'Confirm Delete';

            // Content (centered, stacked)
            const content = document.createElement('div');
            content.className = 'custom-mud-dialog-content';
            content.style.display = 'block';
            content.style.textAlign = 'center';
            content.style.whiteSpace = 'normal';

            // Message with special handling for products
            let messageHtml = `
                <div style="margin-bottom: 24px;">Are you sure you want to delete this ${itemType}?</div>
                <div style="margin-bottom: 24px; font-weight: bold;">${itemName}</div>
            `;
            
            // Add special warning for products
            if (itemType === 'product') {
                messageHtml += `
                    <div style="margin-bottom: 24px; color: #dc3545; font-style: italic;">By deleting this product you are also deleting all the stock movements associated with it.</div>
                `;
            }
            
            messageHtml += `
                <div style="margin-bottom: 0;">This action cannot be undone.</div>
            `;
            
            content.innerHTML = messageHtml;

            // Actions
            const actions = document.createElement('div');
            actions.className = 'custom-mud-dialog-actions';

            // Cancel button
            const cancelBtn = document.createElement('button');
            cancelBtn.className = 'custom-mud-button custom-mud-button-default';
            cancelBtn.textContent = 'CANCEL';
            cancelBtn.onclick = () => {
                overlay.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(overlay)) {
                        document.body.removeChild(overlay);
                    }
                    resolve(false);
                }, 300);
            };

            // Delete button
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'custom-mud-button custom-mud-button-error';
            deleteBtn.textContent = 'DELETE';
            deleteBtn.onclick = () => {
                overlay.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(overlay)) {
                        document.body.removeChild(overlay);
                    }
                    resolve(true);
                }, 300);
            };

            // Assemble dialog
            actions.appendChild(cancelBtn);
            actions.appendChild(deleteBtn);
            dialog.appendChild(title);
            dialog.appendChild(content);
            dialog.appendChild(actions);
            overlay.appendChild(dialog);

            // Add to body
            document.body.appendChild(overlay);

            // Animate
            setTimeout(() => {
                overlay.classList.add('show');
            }, 10);

            // Overlay click closes
            overlay.onclick = (e) => {
                if (e.target === overlay) {
                    cancelBtn.click();
                }
            };

            // ESC key closes
            const handleEsc = (e) => {
                if (e.key === 'Escape') {
                    document.removeEventListener('keydown', handleEsc);
                    cancelBtn.click();
                }
            };
            document.addEventListener('keydown', handleEsc);
        });
    };
</script>