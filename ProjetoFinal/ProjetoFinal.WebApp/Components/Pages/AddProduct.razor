@page "/add-product"
@page "/edit-product/{Id:int}"
@inject IApiService ApiService
@using ProjetoFinal.Shared
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@* Needed for snackbars *@
<MudSnackbarProvider />

@if (Id > 0)
{
    <h3>Edit Product</h3>
}
else
{
    <h3>Add Product</h3>
}


<EditForm FormName="ProductForm" Model="Product" OnValidSubmit="OnAddProduct">
    <div class="mb-3">
        <label for="name" class="form-label">Name:</label>
        <InputText id="name" class="form-control" placeholder="" @bind-Value="Product.Name" />
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="Product.Description" />
    </div>
    <div class="mb-3">
        <label for="price" class="form-label">Price:</label>
        <InputNumber id="price" class="form-control" @bind-Value="Product.Price" />
    </div>
    <div class="mb-3">
        <label for="stock-quantity" class="form-label">Stock Quantity:</label>
        <InputNumber id="stock-quantity" class="form-control" @bind-Value="Product.StockQuantity" />
    </div>
    <div class="mb-3">
        <label for="category-id" class="form-label">Category Id:</label>
        <InputNumber id="category-id" class="form-control" @bind-Value="Product.CategoryId" />
    </div>
    @{
        var buttonText = Id > 0 ? "Save" : "Add";
    }
    <button class="btn btn-primary" type="submit">@buttonText</button>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }
    private Product Product { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Id > 0)
        {
            try
            {
                Product = await ApiService.GetProductAsync(Id);
            }
            catch (Exception ex)
            {
                Snackbar.Add("Failed to load product data.", Severity.Error);
            }
        }
    }

    private async Task OnAddProduct()
    {
        try
        {
            if (Id > 0)
            {
                // Create a clean product object without navigation properties
                var productToUpdate = new Product
                {
                    Id = Id,
                    Name = Product.Name,
                    Description = Product.Description,
                    Price = Product.Price,
                    StockQuantity = Product.StockQuantity,
                    CategoryId = Product.CategoryId,
                    // Explicitly set navigation properties to null
                    Category = null,
                    Images = null,
                    StockMovements = null
                };

                var response = await ApiService.UpdateProduct(productToUpdate);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Product updated successfully!", Severity.Success);
                    await Task.Delay(1000); // Brief delay to show success message
                    NavigationManager.NavigateTo("/products");
                }
                else
                {
                    Snackbar.Add($"Failed to update product. Status: {response.StatusCode}", Severity.Error);
                }
            }
            else
            {
                // For new products, also ensure navigation properties are null
                var productToAdd = new Product
                {
                    Name = Product.Name,
                    Description = Product.Description,
                    Price = Product.Price,
                    StockQuantity = Product.StockQuantity,
                    CategoryId = Product.CategoryId,
                    Category = null,
                    Images = null,
                    StockMovements = null
                };

                var response = await ApiService.AddProductAsync(productToAdd);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Product added successfully!", Severity.Success);
                    Product = new();
                }
                else
                {
                    Snackbar.Add($"Failed to add product. Status: {response.StatusCode}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Operation failed: {ex.Message}", Severity.Error);
        }
    }
}
