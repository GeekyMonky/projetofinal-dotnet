@page "/add-product"
@page "/edit-product/{Id:int}"
@inject IApiService ApiService
@using ProjetoFinal.Shared
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@* Needed for snackbars *@
<MudSnackbarProvider />

@if (Id > 0)
{
    <h3>Edit Product</h3>
}
else
{
    <h3>Add Product</h3>
}

@if (_loadingCategories)
{
    <div class="d-flex justify-content-center my-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading categories...</span>
        </div>
    </div>
}
else
{
    <EditForm FormName="ProductForm" Model="Product" OnValidSubmit="OnAddProduct">
        <div class="mb-3">
            <label for="name" class="form-label">Name:</label>
            <InputText id="name" class="form-control" placeholder="" @bind-Value="Product.Name" />
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Description:</label>
            <InputTextArea id="description" class="form-control" @bind-Value="Product.Description" />
        </div>
        <div class="mb-3">
            <label for="price" class="form-label">Price (€):</label>
            <InputNumber id="price" class="form-control" @bind-Value="Product.Price" />
        </div>
        @if (Id > 0)
        {
            <div class="mb-3">
                <label class="form-label">Current Stock Quantity:</label>
                <div class="form-control-plaintext">@Product.StockQuantity</div>
                <small class="form-text text-muted">Stock quantity is managed through stock movements. <a href="/stock-movements">Manage stock movements</a></small>
            </div>
        }
        <div class="mb-3">
            <label for="category" class="form-label">Category:</label>
            <InputSelect id="category" class="form-control" @bind-Value="Product.CategoryId">
                <option value="0">-- Select a Category --</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
            @if (Product.CategoryId == 0)
            {
                <small class="form-text text-danger">Please select a category.</small>
            }
        </div>
        @{
            var buttonText = Id > 0 ? "Save" : "Add";
        }
        <button class="btn btn-primary" type="submit" disabled="@(Product.CategoryId == 0)">@buttonText</button>
    </EditForm>
}

@code {

    [Parameter]
    public int Id { get; set; }
    private Product Product { get; set; } = new();
    private List<Category> Categories { get; set; } = new();
    private bool _loadingCategories = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            // Load categories first
            Categories = await ApiService.GetCategoriesAsync();
            _loadingCategories = false;

            if (Id > 0)
            {
                try
                {
                    Product = await ApiService.GetProductAsync(Id);
                }
                catch (Exception)
                {
                    Snackbar.Add("Failed to load product data.", Severity.Error);
                }
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to load categories.", Severity.Error);
            _loadingCategories = false;
        }
    }

    private async Task OnAddProduct()
    {
        if (Product.CategoryId == 0)
        {
            Snackbar.Add("Please select a category.", Severity.Warning);
            return;
        }

        try
        {
            if (Id > 0)
            {
                // Create a clean product object without navigation properties
                var productToUpdate = new Product
                {
                    Id = Id,
                    Name = Product.Name,
                    Description = Product.Description,
                    Price = Product.Price,
                    StockQuantity = Product.StockQuantity, // Keep existing stock quantity for updates
                    CategoryId = Product.CategoryId,
                    // Explicitly set navigation properties to null
                    Category = null,
                    Images = null,
                    StockMovements = null
                };

                var response = await ApiService.UpdateProduct(productToUpdate);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Product updated successfully!", Severity.Success);
                    await Task.Delay(1000); // Brief delay to show success message
                    NavigationManager.NavigateTo("/products");
                }
                else
                {
                    Snackbar.Add($"Failed to update product. Status: {response.StatusCode}", Severity.Error);
                }
            }
            else
            {
                // For new products, set initial stock quantity to 0
                var productToAdd = new Product
                {
                    Name = Product.Name,
                    Description = Product.Description,
                    Price = Product.Price,
                    StockQuantity = 0, // Always start with 0 for new products
                    CategoryId = Product.CategoryId,
                    Category = null,
                    Images = null,
                    StockMovements = null
                };

                var response = await ApiService.AddProductAsync(productToAdd);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Product added successfully! Add stock movements to set initial inventory.", Severity.Success);
                    Product = new();
                }
                else
                {
                    Snackbar.Add($"Failed to add product. Status: {response.StatusCode}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Operation failed: {ex.Message}", Severity.Error);
        }
    }
}
