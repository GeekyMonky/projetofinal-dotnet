@page "/stock-movements"
@using ProjetoFinal.Shared
@using MudBlazor
@rendermode InteractiveServer
@inject IApiService ApiService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Needed for snackbars *@
<MudSnackbarProvider />

<h3>Stock Movements</h3>
<h3>@Message</h3>

<MudTable Items="SortedStockMovementList" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh Style="cursor: pointer;" @onclick="() => SortBy(nameof(StockMovement.Quantity))">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                Quantity
                @if (_currentSortColumn == nameof(StockMovement.Quantity))
                {
                    <MudIcon Icon="@(_sortAscending ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Size="Size.Small" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Size="Size.Small" Style="opacity: 0.5;" />
                }
            </div>
        </MudTh>
        <MudTh Style="cursor: pointer;" @onclick="() => SortBy(nameof(StockMovement.Date))">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                Date
                @if (_currentSortColumn == nameof(StockMovement.Date))
                {
                    <MudIcon Icon="@(_sortAscending ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Size="Size.Small" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Size="Size.Small" Style="opacity: 0.5;" />
                }
            </div>
        </MudTh>
        <MudTh Style="cursor: pointer;" @onclick="@(() => SortBy("Product"))">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                Product
                @if (_currentSortColumn == "Product")
                {
                    <MudIcon Icon="@(_sortAscending ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Size="Size.Small" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Size="Size.Small" Style="opacity: 0.5;" />
                }
            </div>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
        <MudTd DataLabel="Date">@context.Date.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="Product">
            @if (context.Product != null)
            {
                <span>@context.Product.Name</span>
            }
            else
            {
                <span style="color: #999;">Product ID: @context.ProductId</span>
            }
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                           OnClick="() => OnEditStockMovement(context.Id)">
            </MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete"
                           OnClick="@(() => OnStockMovementDeleteConfirm(context.Id, GetProductDisplayName(context), context.Quantity, context.Date))">   
            </MudIconButton>
            </MudTd>
    </RowTemplate>
</MudTable>

@code{
    private string Message { get; set; } = string.Empty;

    private List<StockMovement> StockMovementList { get; set; } = new();
    private List<StockMovement> SortedStockMovementList { get; set; } = new();

    private string _currentSortColumn = string.Empty;
    private bool _sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            await LoadStockMovements();
        }
        catch (Exception ex)
        {
            Message = $"Error fetching stock movements: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task LoadStockMovements()
    {
        try
        {
            StockMovementList = await ApiService.GetStockMovementsAsync();
            SortedStockMovementList = new List<StockMovement>(StockMovementList);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Message = $"Failed to load stock movements: {ex.Message}";
            StateHasChanged();
        }
    }

    private void SortBy(string columnName)
    {
        if (_currentSortColumn == columnName)
        {
            // Toggle sort direction if same column
            _sortAscending = !_sortAscending;
        }
        else
        {
            // New column, default to ascending
            _currentSortColumn = columnName;
            _sortAscending = true;
        }

        switch (columnName)
        {
            case nameof(StockMovement.Quantity):
                SortedStockMovementList = _sortAscending 
                    ? StockMovementList.OrderBy(sm => sm.Quantity).ToList()
                    : StockMovementList.OrderByDescending(sm => sm.Quantity).ToList();
                break;

            case nameof(StockMovement.Date):
                SortedStockMovementList = _sortAscending 
                    ? StockMovementList.OrderBy(sm => sm.Date).ToList()
                    : StockMovementList.OrderByDescending(sm => sm.Date).ToList();
                break;

            case "Product":
                SortedStockMovementList = _sortAscending 
                    ? StockMovementList.OrderBy(sm => sm.Product?.Name ?? string.Empty).ToList()
                    : StockMovementList.OrderByDescending(sm => sm.Product?.Name ?? string.Empty).ToList();
                break;

            default:
                SortedStockMovementList = new List<StockMovement>(StockMovementList);
                break;
        }

        StateHasChanged();
    }

    private string GetProductDisplayName(StockMovement stockMovement)
    {
        return stockMovement.Product?.Name ?? $"Product ID: {stockMovement.ProductId}";
    }

    private async Task OnStockMovementDeleteConfirm(int id, string productName, int quantity, DateTime date)
    {
        try
        {
            var movementDescription = $"{productName} (Qty: {quantity}, Date: {date:dd/MM/yyyy})";
            var confirmed = await JSRuntime.InvokeAsync<bool>("showMudBlazorStyleConfirm", "stock movement", movementDescription);
            if (confirmed)
            {
                await OnStockMovementDelete(id);
            }
            else
            {
                Snackbar.Add("Stock movement deletion cancelled.", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing confirmation dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnStockMovementDelete(int id)
    {
        var response = await ApiService.DeleteStockMovementAsync(id);
        if(response.IsSuccessStatusCode)
        {
            Snackbar.Add("Stock movement deleted successfully.", Severity.Success);
            await LoadStockMovements();
        }
        else
        {
            Snackbar.Add("Failed to delete stock movement.", Severity.Error);
        }
    }

    private void OnEditStockMovement(int id)
    {
        NavigationManager.NavigateTo($"/edit-stock-movement/{id}");
    }
}

<script>
    window.showMudBlazorStyleConfirm = (itemType, itemName) => {
        return new Promise((resolve) => {
            // Create overlay
            const overlay = document.createElement('div');
            overlay.className = 'custom-mud-dialog-overlay';

            // Create dialog
            const dialog = document.createElement('div');
            dialog.className = 'custom-mud-dialog';

            // Title
            const title = document.createElement('div');
            title.className = 'custom-mud-dialog-title';
            title.textContent = 'Confirm Delete';

            // Content (centered, stacked)
            const content = document.createElement('div');
            content.className = 'custom-mud-dialog-content';
            content.style.display = 'block';
            content.style.textAlign = 'center';
            content.style.whiteSpace = 'normal';

            // Message
            let messageHtml = `
                <div style="margin-bottom: 24px;">Are you sure you want to delete this ${itemType}?</div>
                <div style="margin-bottom: 24px; font-weight: bold;">${itemName}</div>
                <div style="margin-bottom: 0;">This action cannot be undone.</div>
            `;
            content.innerHTML = messageHtml;

            // Actions
            const actions = document.createElement('div');
            actions.className = 'custom-mud-dialog-actions';

            // Cancel button
            const cancelBtn = document.createElement('button');
            cancelBtn.className = 'custom-mud-button custom-mud-button-default';
            cancelBtn.textContent = 'CANCEL';
            cancelBtn.onclick = () => {
                overlay.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(overlay)) {
                        document.body.removeChild(overlay);
                    }
                    resolve(false);
                }, 300);
            };

            // Delete button
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'custom-mud-button custom-mud-button-error';
            deleteBtn.textContent = 'DELETE';
            deleteBtn.onclick = () => {
                overlay.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(overlay)) {
                        document.body.removeChild(overlay);
                    }
                    resolve(true);
                }, 300);
            };

            // Assemble dialog
            actions.appendChild(cancelBtn);
            actions.appendChild(deleteBtn);
            dialog.appendChild(title);
            dialog.appendChild(content);
            dialog.appendChild(actions);
            overlay.appendChild(dialog);

            // Add to body
            document.body.appendChild(overlay);

            // Animate
            setTimeout(() => {
                overlay.classList.add('show');
            }, 10);

            // Overlay click closes
            overlay.onclick = (e) => {
                if (e.target === overlay) {
                    cancelBtn.click();
                }
            };

            // ESC key closes
            const handleEsc = (e) => {
                if (e.key === 'Escape') {
                    document.removeEventListener('keydown', handleEsc);
                    cancelBtn.click();
                }
            };
            document.addEventListener('keydown', handleEsc);
        });
    };
</script>

