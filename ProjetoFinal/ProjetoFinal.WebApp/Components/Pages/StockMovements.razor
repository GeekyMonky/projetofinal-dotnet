@page "/stock-movements"
@using ProjetoFinal.Shared
@using MudBlazor
@rendermode InteractiveServer
@inject IApiService ApiService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Needed for snackbars *@
<MudSnackbarProvider />

<PageTitle>Stock Movement List</PageTitle>

<h3>Stock Movements</h3>
<h3>@Message</h3>

<MudTable Items="SortedStockMovementList" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh Style="cursor: pointer;" @onclick="() => SortBy(nameof(StockMovement.Quantity))">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                Quantity
                @if (_currentSortColumn == nameof(StockMovement.Quantity))
                {
                    <MudIcon Icon="@(_sortAscending ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Size="Size.Small" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Size="Size.Small" Style="opacity: 0.5;" />
                }
            </div>
        </MudTh>
        <MudTh Style="cursor: pointer;" @onclick="() => SortBy(nameof(StockMovement.Date))">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                Date
                @if (_currentSortColumn == nameof(StockMovement.Date))
                {
                    <MudIcon Icon="@(_sortAscending ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Size="Size.Small" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Size="Size.Small" Style="opacity: 0.5;" />
                }
            </div>
        </MudTh>
        <MudTh Style="cursor: pointer;" @onclick="@(() => SortBy("Product"))">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                Product
                @if (_currentSortColumn == "Product")
                {
                    <MudIcon Icon="@(_sortAscending ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Size="Size.Small" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Size="Size.Small" Style="opacity: 0.5;" />
                }
            </div>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
        <MudTd DataLabel="Date">@context.Date.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="Product">
            @if (context.Product != null)
            {
                <span>@context.Product.Name</span>
            }
            else
            {
                <span style="color: #999;">Product ID: @context.ProductId</span>
            }
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                           OnClick="() => OnEditStockMovement(context.Id)">
            </MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete"
                           OnClick="@(() => OnStockMovementDeleteConfirm(context.Id, GetProductDisplayName(context), context.Quantity, context.Date))">   
            </MudIconButton>
            </MudTd>
    </RowTemplate>
</MudTable>

@code{
    private string Message { get; set; } = string.Empty;

    private List<StockMovement> StockMovementList { get; set; } = new();
    private List<StockMovement> SortedStockMovementList { get; set; } = new();

    private string _currentSortColumn = string.Empty;
    private bool _sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            await LoadStockMovements();
        }
        catch (Exception ex)
        {
            Message = $"Error fetching stock movements: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task LoadStockMovements()
    {
        try
        {
            StockMovementList = await ApiService.GetStockMovementsAsync();
            SortedStockMovementList = new List<StockMovement>(StockMovementList);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Message = $"Failed to load stock movements: {ex.Message}";
            StateHasChanged();
        }
    }

    private void SortBy(string columnName)
    {
        if (_currentSortColumn == columnName)
        {
            // Toggle sort direction if same column
            _sortAscending = !_sortAscending;
        }
        else
        {
            // New column, default to ascending
            _currentSortColumn = columnName;
            _sortAscending = true;
        }

        switch (columnName)
        {
            case nameof(StockMovement.Quantity):
                SortedStockMovementList = _sortAscending 
                    ? StockMovementList.OrderBy(sm => sm.Quantity).ToList()
                    : StockMovementList.OrderByDescending(sm => sm.Quantity).ToList();
                break;

            case nameof(StockMovement.Date):
                SortedStockMovementList = _sortAscending 
                    ? StockMovementList.OrderBy(sm => sm.Date).ToList()
                    : StockMovementList.OrderByDescending(sm => sm.Date).ToList();
                break;

            case "Product":
                SortedStockMovementList = _sortAscending 
                    ? StockMovementList.OrderBy(sm => sm.Product?.Name ?? string.Empty).ToList()
                    : StockMovementList.OrderByDescending(sm => sm.Product?.Name ?? string.Empty).ToList();
                break;

            default:
                SortedStockMovementList = new List<StockMovement>(StockMovementList);
                break;
        }

        StateHasChanged();
    }

    private string GetProductDisplayName(StockMovement stockMovement)
    {
        return stockMovement.Product?.Name ?? $"Product ID: {stockMovement.ProductId}";
    }

    private async Task OnStockMovementDeleteConfirm(int id, string productName, int quantity, DateTime date)
    {
        try
        {
            var movementDescription = $"{productName} (Qty: {quantity}, Date: {date:dd/MM/yyyy})";
            var confirmed = await JSRuntime.InvokeAsync<bool>("showMudBlazorStyleConfirm", "stock movement", movementDescription);
            if (confirmed)
            {
                await OnStockMovementDelete(id);
            }
            else
            {
                Snackbar.Add("Stock movement deletion cancelled.", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing confirmation dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnStockMovementDelete(int id)
    {
        var response = await ApiService.DeleteStockMovementAsync(id);
        if(response.IsSuccessStatusCode)
        {
            Snackbar.Add("Stock movement deleted successfully.", Severity.Success);
            await LoadStockMovements();
        }
        else
        {
            Snackbar.Add("Failed to delete stock movement.", Severity.Error);
        }
    }

    private void OnEditStockMovement(int id)
    {
        NavigationManager.NavigateTo($"/edit-stock-movement/{id}");
    }
}

