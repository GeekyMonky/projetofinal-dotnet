@page "/add-stock-movement"
@page "/edit-stock-movement/{Id:int}"
@inject IApiService ApiService
@using ProjetoFinal.Shared
@rendermode InteractiveServer
@inject ISnackbar Snackbar

@* Needed for snackbars *@
<MudSnackbarProvider />

@if (Id > 0)
{
    <h3>Edit Stock Movement</h3>
}
else
{
    <h3>Add Stock Movement</h3>
}

@if (_loadingProducts)
{
    <div class="d-flex justify-content-center my-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading products...</span>
        </div>
    </div>
}
else
{
    <EditForm FormName="StockMovementForm" Model="StockMovement" OnValidSubmit="OnAddStockMovement">
        <div class="mb-3">
            <label for="quantity" class="form-label">Quantity:</label>
            <InputNumber id="quantity" class="form-control" placeholder="" @bind-Value="StockMovement.Quantity" />
            <small class="form-text text-muted">Use positive numbers for stock increases (incoming inventory) and negative numbers for stock decreases (sales, waste, etc.)</small>
        </div>
        <div class="mb-3">
            <label for="date" class="form-label">Date:</label>
            <InputDate id="date" class="form-control" @bind-Value="StockMovement.Date" />
        </div>
        <div class="mb-3">
            <label for="product" class="form-label">Product:</label>
            <InputSelect id="product" class="form-control" @bind-Value="StockMovement.ProductId">
                <option value="0">-- Select a Product --</option>
                @foreach (var product in Products)
                {
                    <option value="@product.Id">@product.Name (Current Stock: @product.StockQuantity)</option>
                }
            </InputSelect>
            @if (StockMovement.ProductId == 0)
            {
                <small class="form-text text-danger">Please select a product.</small>
            }
        </div>
        @{
            var buttonText = Id > 0 ? "Save" : "Add";
        }
        <button class="btn btn-primary" type="submit" disabled="@(StockMovement.ProductId == 0)">@buttonText</button>
    </EditForm>
}

@code {

    [Parameter]
    public int Id { get; set; }
    private StockMovement StockMovement { get; set; } = new();
    private List<Product> Products { get; set; } = new();
    private bool _loadingProducts = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            // Load products first
            Products = await ApiService.GetProductsAsync();
            _loadingProducts = false;

            if (Id > 0)
            {
                try
                {
                    StockMovement = await ApiService.GetStockMovementAsync(Id);
                }
                catch (Exception)
                {
                    Snackbar.Add("Failed to load stock movement data.", Severity.Error);
                }
            }
            else
            {
                // Set default date for new stock movements
                StockMovement.Date = DateTime.Today;
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to load products.", Severity.Error);
            _loadingProducts = false;
        }
    }

    private async Task OnAddStockMovement()
    {
        if (StockMovement.ProductId == 0)
        {
            Snackbar.Add("Please select a product.", Severity.Warning);
            return;
        }

        if (StockMovement.Quantity == 0)
        {
            Snackbar.Add("Please enter a quantity (positive for increases, negative for decreases).", Severity.Warning);
            return;
        }

        try
        {
            if (Id > 0)
            {
                var response = await ApiService.UpdateStockMovement(StockMovement);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Stock movement updated successfully!", Severity.Success);
                    StockMovement = new();
                }
                else
                {
                    Snackbar.Add("Failed to update stock movement.", Severity.Error);
                }
            }
            else
            {
                var response = await ApiService.AddStockMovementAsync(StockMovement);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Stock movement added successfully!", Severity.Success);
                    StockMovement = new();
                    StockMovement.Date = DateTime.Today; // Reset date to today for next entry
                }
                else
                {
                    Snackbar.Add("Failed to add stock movement.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Operation failed: {ex.Message}", Severity.Error);
        }
    }
}

