@page "/add-stock-movement"
@page "/edit-stock-movement/{Id:int}"
@inject IApiService ApiService
@using ProjetoFinal.Shared
@rendermode InteractiveServer
@inject ISnackbar Snackbar

@* Needed for snackbars *@
<MudSnackbarProvider />

@if (Id > 0)
{
    <h3>Edit Stock Movement</h3>
}
else
{
    <h3>Add Stock Movement</h3>
}


<EditForm FormName="StockMovementForm" Model="StockMovement" OnValidSubmit="OnAddStockMovement">
    <div class="mb-3">
        <label for="quantity" class="form-label">Quantity:</label>
        <InputNumber id="quantity" class="form-control" placeholder="" @bind-Value="StockMovement.Quantity" />
    </div>
    <div class="mb-3">
        <label for="date" class="form-label">Date:</label>
        <InputDate id="date" class="form-control" @bind-Value="StockMovement.Date" />
    </div>
    <div class="mb-3">
        <label for="product-id" class="form-label">Product Id:</label>
        <InputNumber id="product-id" class="form-control" @bind-Value="StockMovement.ProductId" />
    </div>
    @{
        var buttonText = Id > 0 ? "Save" : "Add";
    }
    <button class="btn btn-primary" type="submit">@buttonText</button>
</EditForm>
@Message


@code {

    [Parameter]
    public int Id { get; set; }
    private StockMovement StockMovement { get; set; } = new();
    private string Message { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Id > 0)
        {
            StockMovement = await ApiService.GetStockMovementAsync(Id);
        }
    }

    private async Task OnAddStockMovement()
    {
        if (Id > 0)
        {
            var response = await ApiService.UpdateStockMovement(StockMovement);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Stock movement updated successfully!", Severity.Success);
                StockMovement = new();
            }
            else
            {
                Snackbar.Add("Failed to update stock movement.", Severity.Error);
            }

        }
        else
        {
            var response = await ApiService.AddStockMovementAsync(StockMovement);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Stock movement added successfully!", Severity.Success);
                StockMovement = new();
            }
            else
            {
                Snackbar.Add("Failed to add stock movement.", Severity.Error);
            }
        }

    }


}

