@page "/add-stock-movement"
@page "/edit-stock-movement/{Id:int}"
@using ProjetoFinal.Shared
@rendermode InteractiveServer
@inject IApiService ApiService
@inject ISnackbar Snackbar

@* Needed for snackbars *@
<MudSnackbarProvider />

@if (Id > 0)
{
    <h3>Edit Stock Movement</h3>
}
else
{
    <h3>Add Stock Movement</h3>
}

@if (_loadingProducts)
{
    <div class="d-flex justify-content-center my-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading products...</span>
        </div>
    </div>
}
else
{
    <EditForm FormName="StockMovementForm" Model="StockMovement" OnValidSubmit="OnAddStockMovement">
        <div class="mb-3">
            <label for="quantity" class="form-label">Quantity:</label>
            <InputNumber id="quantity" class="form-control" placeholder="" @bind-Value="StockMovement.Quantity" @onchange="ValidateStockQuantity" />
            <small class="form-text text-muted">Use positive numbers for stock increases (incoming inventory) and negative numbers for stock decreases (sales, waste, etc.)</small>
            
            @if (_showStockWarning)
            {
                <div class="alert alert-warning mt-2" role="alert">
                    <i class="bi bi-exclamation-triangle"></i>
                    Warning: This movement would result in negative stock (@_projectedStock units). Current stock: @_currentStock
                </div>
            }
        </div>
        <div class="mb-3">
            <label for="date" class="form-label">Date:</label>
            <InputDate id="date" class="form-control" @bind-Value="StockMovement.Date" />
        </div>
        <div class="mb-3">
            <label for="product" class="form-label">Product:</label>
            <InputSelect id="product" class="form-control" @bind-Value="StockMovement.ProductId" @onchange="OnProductChanged">
                <option value="0">-- Select a Product --</option>
                @foreach (var product in Products)
                {
                    <option value="@product.Id">@product.Name (Current Stock: @product.StockQuantity)</option>
                }
            </InputSelect>
            @if (StockMovement.ProductId == 0)
            {
                <small class="form-text text-danger">Please select a product.</small>
            }
        </div>
        @{
            var buttonText = Id > 0 ? "Save" : "Add";
            var isDisabled = StockMovement.ProductId == 0 || _showStockWarning || _isSubmitting;
        }
        <button class="btn btn-primary" type="submit" disabled="@isDisabled">
            @if (_isSubmitting)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            }
            @buttonText
        </button>
        <a href="/stock-movements" class="btn btn-secondary ms-2">Cancel</a>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private StockMovement StockMovement { get; set; } = new();
    private List<Product> Products { get; set; } = new();
    private bool _loadingProducts = true;
    private bool _isSubmitting = false;
    private bool _showStockWarning = false;
    private int _currentStock = 0;
    private int _projectedStock = 0;
    private StockMovement? _originalStockMovement;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            // Load products first
            Products = await ApiService.GetProductsAsync();
            _loadingProducts = false;

            if (Id > 0)
            {
                try
                {
                    StockMovement = await ApiService.GetStockMovementAsync(Id);
                    _originalStockMovement = new StockMovement
                    {
                        Id = StockMovement.Id,
                        Quantity = StockMovement.Quantity,
                        Date = StockMovement.Date,
                        ProductId = StockMovement.ProductId
                    };
                    ValidateStockQuantity();
                }
                catch (Exception)
                {
                    Snackbar.Add("Failed to load stock movement data.", Severity.Error);
                }
            }
            else
            {
                // Set default date for new stock movements
                StockMovement.Date = DateTime.Today;
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to load products.", Severity.Error);
            _loadingProducts = false;
        }
    }

    private void OnProductChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int productId))
        {
            StockMovement.ProductId = productId;
            ValidateStockQuantity();
        }
    }

    private void ValidateStockQuantity()
    {
        _showStockWarning = false;
        
        if (StockMovement.ProductId <= 0)
            return;

        var selectedProduct = Products.FirstOrDefault(p => p.Id == StockMovement.ProductId);
        if (selectedProduct == null)
            return;

        _currentStock = selectedProduct.StockQuantity;
        
        // Calculate projected stock after this movement
        if (Id > 0 && _originalStockMovement != null)
        {
            // For editing: remove the original movement effect and add the new one
            _projectedStock = _currentStock - _originalStockMovement.Quantity + StockMovement.Quantity;
        }
        else
        {
            // For new movement: just add the movement to current stock
            _projectedStock = _currentStock + StockMovement.Quantity;
        }

        // Show warning if projected stock would be negative
        if (_projectedStock < 0)
        {
            _showStockWarning = true;
        }

        StateHasChanged();
    }

    private async Task OnAddStockMovement()
    {
        if (StockMovement.ProductId == 0)
        {
            Snackbar.Add("Please select a product.", Severity.Warning);
            return;
        }

        if (StockMovement.Quantity == 0)
        {
            Snackbar.Add("Please enter a quantity (positive for increases, negative for decreases).", Severity.Warning);
            return;
        }

        // Final validation before submission
        ValidateStockQuantity();
        if (_showStockWarning)
        {
            Snackbar.Add($"Cannot complete this stock movement. It would result in negative stock ({_projectedStock} units). Current stock is {_currentStock} units.", Severity.Error);
            return;
        }

        _isSubmitting = true;
        StateHasChanged();

        try
        {
            if (Id > 0)
            {
                var stockMovementToUpdate = new StockMovement
                {
                    Id = Id,
                    Quantity = StockMovement.Quantity,
                    Date = StockMovement.Date,
                    ProductId = StockMovement.ProductId,
                    Product = null
                };

                var response = await ApiService.UpdateStockMovement(stockMovementToUpdate);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Stock movement updated successfully!", Severity.Success);
                    await Task.Delay(1000);
                    // Refresh products to show updated stock
                    Products = await ApiService.GetProductsAsync();
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Failed to update stock movement.", Severity.Error);
                }
            }
            else
            {
                var stockMovementToAdd = new StockMovement
                {
                    Quantity = StockMovement.Quantity,
                    Date = StockMovement.Date,
                    ProductId = StockMovement.ProductId,
                    Product = null
                };

                var response = await ApiService.AddStockMovementAsync(stockMovementToAdd);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Stock movement added successfully!", Severity.Success);
                    
                    // Reset form
                    StockMovement = new StockMovement { Date = DateTime.Today };
                    _showStockWarning = false;
                    
                    // Refresh products to show updated stock
                    Products = await ApiService.GetProductsAsync();
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Failed to add stock movement.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Operation failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }
}

