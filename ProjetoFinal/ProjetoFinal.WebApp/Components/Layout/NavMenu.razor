<nav class="navbar navbar-dark bg-dark w-100" style="padding: 0.5rem 1rem; position: relative; overflow: visible !important;">
    <div class="w-100 d-flex justify-content-between align-items-center" style="overflow: visible !important;">
        <!-- Left side spacer -->
        <div style="width: 48px;"></div>
        
        <!-- Center navigation items -->
        <div class="d-flex justify-content-center">
            <ul class="nav-items-horizontal" style="overflow: visible !important;">
                <li>
                    <NavLink href="" Match="NavLinkMatch.All">
                        Home
                    </NavLink>
                </li>
                <li class="dropdown-hover" style="position: relative; overflow: visible !important;">
                    <button type="button" class="dropdown-toggle-btn">
                        View/Manage
                        <span class="dropdown-arrow">▼</span>
                    </button>
                    
                    <div class="dropdown-menu-hover view-manage-dropdown">
                        <div style="display: flex; align-items: center; justify-content: center; gap: 1rem; margin-bottom: 1rem;">
                            <NavLink href="categories" class="view-manage-item">
                                <span class="bi bi-tags"></span>
                                <span>Categories</span>
                            </NavLink>
                            <NavLink href="products" class="view-manage-item">
                                <span class="bi bi-box-seam"></span>
                                <span>Products</span>
                            </NavLink>
                            <NavLink href="stock-movements" class="view-manage-item">
                                <span class="bi bi-clipboard-data"></span>
                                <span>Stock Movements</span>
                            </NavLink>
                        </div>
                    </div>
                </li>
                <li class="dropdown-hover" style="position: relative; overflow: visible !important;">
                    <button type="button" class="dropdown-toggle-btn">
                        Create
                        <span class="dropdown-arrow">▼</span>
                    </button>
                    
                    <div class="dropdown-menu-hover">
                        <div style="display: flex; align-items: center; justify-content: center; gap: 0.5rem; margin-bottom: 1rem;">
                            <NavLink href="add-category" class="workflow-item">
                                <span class="bi bi-tag-fill"></span>
                                <span>Add Category</span>
                            </NavLink>
                            <div class="workflow-arrow">
                                <span class="bi bi-arrow-right"></span>
                            </div>
                            <NavLink href="add-product" class="workflow-item">
                                <span class="bi bi-box"></span>
                                <span>Add Product</span>
                            </NavLink>
                            <div class="workflow-arrow">
                                <span class="bi bi-arrow-right"></span>
                            </div>
                            <NavLink href="add-stock-movement" class="workflow-item">
                                <span class="bi bi-clipboard-plus"></span>
                                <span>Add Stock Movement</span>
                            </NavLink>
                        </div>
                        <div class="workflow-legend">
                            <span class="legend-text">(Proper workflow)</span>
                        </div>
                    </div>
                </li>
            </ul>
        </div>
        
        <!-- Right side with Dark Mode Toggle -->
        <div class="navbar-right">
            <button type="button" class="dark-mode-toggle" onclick="toggleDarkMode()" title="Toggle Dark Mode">
                <span class="bi bi-moon-fill dark-mode-icon"></span>
                <span class="bi bi-sun-fill light-mode-icon"></span>
            </button>
        </div>
    </div>
</nav>

<!-- Dark Mode Toggle Script -->
<script>
    // Dark mode functionality
    function initializeDarkMode() {
        // Check for saved theme preference or default to light mode
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        
        if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
            document.documentElement.setAttribute('data-theme', 'dark');
            updateToggleButton('dark');
        } else {
            document.documentElement.setAttribute('data-theme', 'light');
            updateToggleButton('light');
        }
    }

    function toggleDarkMode() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateToggleButton(newTheme);
    }

    function updateToggleButton(theme) {
        const button = document.querySelector('.dark-mode-toggle');
        if (button) {
            button.setAttribute('data-theme', theme);
        }
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', initializeDarkMode);
    
    // For Blazor navigation
    if (window.Blazor) {
        window.Blazor.addEventListener('enhancedload', initializeDarkMode);
    }
    
    // Initialize immediately if DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeDarkMode);
    } else {
        initializeDarkMode();
    }
</script>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(50); // Small delay to ensure DOM is ready
            await InvokeAsync(StateHasChanged);
        }
    }
}